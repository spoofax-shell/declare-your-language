module builders/run

imports builders/analysis

imports stratego/metaborg
imports runtime/analysis/-
imports runtime/index/-
imports runtime/nabl/-
imports runtime/properties/-
imports runtime/types/-
imports runtime/task/-
imports runtime/editor/-

imports signatures/Values-sig
imports signatures/Classes-sig


signature
  constructors
    R_init_V : Value -> Result
    
rules
	
  external runprogram(|)
  
  runprogram-value = runprogram; ?R_init_V(<render-value>)
 
//  run-program-basic-builder :
//    (selected, position, ast, path, project-path) -> (filename, result)
//    with				
//	    (ast', error*) := <analyze-ast-step> (ast, path, project-path);
//			
//      filename := <guarantee-extension(|"run.aterm")> path;
//      if not([] := error*) then
//        <debug(!"Fix errors before generating code. Exiting code generation. ")> error*;
//        result := None()
//      else
//        result := <strip-annos; debug(!"ast: "); runprogram> ast'
//      end

  run-program-basic-builder :
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"run.aterm")> path;
      result := <strip-annos; debug(!"ast: "); runprogram> ast

                
  editor-run-program-debug :
    (selected, position, ast, path, project-path) -> (filename, result)
    with 
      (filename, result) := <run-program-basic-builder>

  editor-run-program :
    (selected, position, ast, path, project-path) -> (filename, <render-value>result)
    with
      (filename, R_init_V(result)) := <run-program-basic-builder>;
      message1                     := <debug(!"run.str: ")> selected;
      message2                     := <debug(!"run.str: ")> position;
      message3                     := <debug(!"run.str: ")> ast;
      message4                     := <debug(!"run.str: ")> path;
      message5                     := <debug(!"run.str: ")> project-path

rules
  
  render-value :
    NumV(i) -> NumV(<int-to-string>i)
  
  render-value : 
    BoolV("___DS_False___"#([])) -> BoolV(FalseV())
  
  render-value : 
    BoolV("___DS_True___"#([])) -> BoolV(TrueV())
    
  render-value :
    o2v(o) -> <render-value>o
    
  render-value :
    ObjV(x, s, fm, mm) -> ObjV(x, <render-value>s, <render-value>fm, <render-value>mm)
    
  render-value :
    NoSuper() -> NoSuper()
    
  render-value :
    Super(o) -> Super(<render-value>o)
    
  render-value :
    "Map"#([x | binds]) -> Map(x, <map(render-value)> binds)
    
  render-value :
    Bind(x, v) -> Bind(x, <render-value>v)
    
  render-value :
  	m@Method(_, _, _, _) -> m 
  	
  render-value =
  	is-int
  
  render-value = 
    debug(!"fail: ")
    
  
  